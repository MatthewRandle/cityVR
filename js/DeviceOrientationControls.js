THREE.DeviceOrientationControls = function (e) { var a = this; this.object = e, this.object.rotation.reorder("YXZ"), this.enabled = !0, this.deviceOrientation = {}, this.screenOrientation = 0, this.alphaOffset = 0; function n(e) { a.deviceOrientation = e } function t() { a.screenOrientation = window.orientation || 0 } var r, c, s, d, E = (r = new THREE.Vector3(0, 0, 1), c = new THREE.Euler, s = new THREE.Quaternion, d = new THREE.Quaternion(-Math.sqrt(.5), 0, 0, Math.sqrt(.5)), function (e, n, t, i, o) { c.set(t, n, -i, "YXZ"), e.setFromEuler(c), e.multiply(d), e.multiply(s.setFromAxisAngle(r, -o)) }); this.connect = function () { t(), void 0 !== window.DeviceOrientationEvent && "function" == typeof window.DeviceOrientationEvent.requestPermission ? window.DeviceOrientationEvent.requestPermission().then(function (e) { "granted" == e && (window.addEventListener("orientationchange", t, !1), window.addEventListener("deviceorientation", n, !1)) }).catch(function (e) { console.error("THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:", e) }) : (window.addEventListener("orientationchange", t, !1), window.addEventListener("deviceorientation", n, !1)), a.enabled = !0 }, this.disconnect = function () { window.removeEventListener("orientationchange", t, !1), window.removeEventListener("deviceorientation", n, !1), a.enabled = !1 }, this.update = function () { if (!1 !== a.enabled) { var e = a.deviceOrientation; if (e) { var n = e.alpha ? THREE.Math.degToRad(e.alpha) + a.alphaOffset : 0, t = e.beta ? THREE.Math.degToRad(e.beta) : 0, i = e.gamma ? THREE.Math.degToRad(e.gamma) : 0, o = a.screenOrientation ? THREE.Math.degToRad(a.screenOrientation) : 0; E(a.object.quaternion, n, t, i, o) } } }, this.dispose = function () { a.disconnect() }, this.connect() };